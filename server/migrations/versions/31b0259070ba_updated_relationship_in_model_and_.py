"""Updated relationship in model and rename paswword column in the user model

Revision ID: 31b0259070ba
Revises: 160a446d131c
Create Date: 2024-07-31 21:59:12.884562

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy import text


# revision identifiers, used by Alembic.
revision = '31b0259070ba'
down_revision = '160a446d131c'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # First, rename the column without changing constraints
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.alter_column(
            '_password_hash',
            new_column_name='password_hash',
            existing_type=sa.String(length=255),
            existing_nullable=True  # Allow nulls during rename
        )

    # Ensure that all rows have a non-null password_hash value
    op.execute("""
        UPDATE users
        SET password_hash = password_hash
        WHERE password_hash IS NOT NULL;
    """)

    # Set a default user_id for existing rows
    op.execute(text("""
        UPDATE search_history
        SET user_id = 1
        WHERE user_id IS NULL;
    """))

    # If all rows have non-null values, you can enforce NOT NULL constraint
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.alter_column(
            'password_hash',
            existing_type=sa.String(length=255),
            nullable=False  # Enforce NOT NULL constraint
        )

    with op.batch_alter_table('search_history', schema=None) as batch_op:
        batch_op.alter_column('user_id',
               existing_type=sa.INTEGER(),
               nullable=False)

    # with op.batch_alter_table('users', schema=None) as batch_op:
    #     batch_op.add_column(sa.Column('password_hash', sa.String(length=255), nullable=False))
    #     batch_op.drop_column('_password_hash')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.add_column(sa.Column('_password_hash', sa.VARCHAR(length=255), autoincrement=False, nullable=False))
        batch_op.drop_column('password_hash')

    with op.batch_alter_table('search_history', schema=None) as batch_op:
        batch_op.alter_column('user_id',
               existing_type=sa.INTEGER(),
               nullable=True)

    # ### end Alembic commands ###
